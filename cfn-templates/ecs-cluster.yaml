AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create a new ECS
  cluster to deploy akka cluster
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in your selected VPC
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in ECS cluster
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in ECS cluster
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0eeb334a4b083a5ea
    us-east-2:
      AMIID: ami-044120f0dd7ed0fb4
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'ECS Security Group - ${AWS::StackName}'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 8558
          ToPort: 8558
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 8558
          ToPort: 8558
          CidrIpv6: '::/0'
        - IpProtocol: 'tcp'
          FromPort: 2552
          ToPort: 2552
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 2552
          ToPort: 2552
          CidrIpv6: '::/0'
  ServiceSecurityGroupAkkaManagementSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EcsSecurityGroup.GroupId
      IpProtocol: 'tcp'
      FromPort: 8558
      ToPort: 8558
      SourceSecurityGroupId: !GetAtt EcsSecurityGroup.GroupId
  ServiceSecurityGroupAkkaClusterSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EcsSecurityGroup.GroupId
      IpProtocol: 'tcp'
      FromPort: 2552
      ToPort: 2552
      SourceSecurityGroupId: !GetAtt EcsSecurityGroup.GroupId
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
  ECSIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref 'ECSInstanceRole']
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetId'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: !Sub 'ECS Instance - ${AWS::StackName}'
          PropagateAtLaunch: 'true'
        - Key: Description
          Value: 'This instance is part of the ECS Auto Scaling group'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !GetAtt ECSIamInstanceProfile.Arn
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EcsServiceDiscovery'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeTasks'
                Resource: '*'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref 'AWS::StackName', -ecs-demo-app]]
      RetentionInDays: 7
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app-td]]
      RequiresCompatibilities:
        - EC2
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app-container]]
          Essential: true
          Image: asakchris/akka-cluster-sample:0.1.1.4-SNAPSHOT
          Memory: '256'
          PortMappings:
            - ContainerPort: 2552
            - ContainerPort: 8558
          Environment:
            - Name: JAVA_OPTS
              Value: !Sub '
                -Dconfig.resource=/aws.conf
                -Dlogger-root-level=DEBUG
                -Dakka.management.cluster.bootstrap.contact-point-discovery.service-name=${AWS::StackName}-ecs-demo-app-service
                -Dakka.discovery.aws-api-ecs-async.cluster=${ECSCluster}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-ecs-demo-app-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetId
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt EcsSecurityGroup.GroupId
      LaunchType: EC2
      DesiredCount: 2
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
